// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: tasks.proto

package tasks_grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TaskIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *TaskIDRequest) Reset() {
	*x = TaskIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tasks_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskIDRequest) ProtoMessage() {}

func (x *TaskIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tasks_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskIDRequest.ProtoReflect.Descriptor instead.
func (*TaskIDRequest) Descriptor() ([]byte, []int) {
	return file_tasks_proto_rawDescGZIP(), []int{0}
}

func (x *TaskIDRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type SingleTask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID          string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Description string `protobuf:"bytes,2,opt,name=Description,proto3" json:"Description,omitempty"`
	State       string `protobuf:"bytes,3,opt,name=State,proto3" json:"State,omitempty"`
}

func (x *SingleTask) Reset() {
	*x = SingleTask{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tasks_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SingleTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SingleTask) ProtoMessage() {}

func (x *SingleTask) ProtoReflect() protoreflect.Message {
	mi := &file_tasks_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SingleTask.ProtoReflect.Descriptor instead.
func (*SingleTask) Descriptor() ([]byte, []int) {
	return file_tasks_proto_rawDescGZIP(), []int{1}
}

func (x *SingleTask) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *SingleTask) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *SingleTask) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

type ListTasks struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tasks []*SingleTask `protobuf:"bytes,1,rep,name=Tasks,proto3" json:"Tasks,omitempty"`
}

func (x *ListTasks) Reset() {
	*x = ListTasks{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tasks_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTasks) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTasks) ProtoMessage() {}

func (x *ListTasks) ProtoReflect() protoreflect.Message {
	mi := &file_tasks_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTasks.ProtoReflect.Descriptor instead.
func (*ListTasks) Descriptor() ([]byte, []int) {
	return file_tasks_proto_rawDescGZIP(), []int{2}
}

func (x *ListTasks) GetTasks() []*SingleTask {
	if x != nil {
		return x.Tasks
	}
	return nil
}

var File_tasks_proto protoreflect.FileDescriptor

var file_tasks_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x1f, 0x0a,
	0x0d, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x54,
	0x0a, 0x0a, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x0e, 0x0a, 0x02,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14,
	0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x22, 0x2e, 0x0a, 0x09, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x61, 0x73, 0x6b,
	0x73, 0x12, 0x21, 0x0a, 0x05, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0b, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x05, 0x54,
	0x61, 0x73, 0x6b, 0x73, 0x32, 0xb2, 0x01, 0x0a, 0x0b, 0x54, 0x61, 0x73, 0x6b, 0x48, 0x61, 0x6e,
	0x64, 0x6c, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x12,
	0x0b, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x1a, 0x0b, 0x2e, 0x53,
	0x69, 0x6e, 0x67, 0x6c, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x27, 0x0a, 0x09, 0x46, 0x65, 0x74,
	0x63, 0x68, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x0e, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x61, 0x73,
	0x6b, 0x73, 0x12, 0x2a, 0x0a, 0x0b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x12, 0x0e, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x0b, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x29,
	0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x0e, 0x2e, 0x54,
	0x61, 0x73, 0x6b, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0b, 0x2e, 0x53,
	0x69, 0x6e, 0x67, 0x6c, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x42, 0x04, 0x5a, 0x02, 0x2e, 0x2f, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_tasks_proto_rawDescOnce sync.Once
	file_tasks_proto_rawDescData = file_tasks_proto_rawDesc
)

func file_tasks_proto_rawDescGZIP() []byte {
	file_tasks_proto_rawDescOnce.Do(func() {
		file_tasks_proto_rawDescData = protoimpl.X.CompressGZIP(file_tasks_proto_rawDescData)
	})
	return file_tasks_proto_rawDescData
}

var file_tasks_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_tasks_proto_goTypes = []interface{}{
	(*TaskIDRequest)(nil), // 0: TaskIDRequest
	(*SingleTask)(nil),    // 1: SingleTask
	(*ListTasks)(nil),     // 2: ListTasks
}
var file_tasks_proto_depIdxs = []int32{
	1, // 0: ListTasks.Tasks:type_name -> SingleTask
	1, // 1: TaskHandler.AddTask:input_type -> SingleTask
	0, // 2: TaskHandler.FetchTask:input_type -> TaskIDRequest
	0, // 3: TaskHandler.StateUpdate:input_type -> TaskIDRequest
	0, // 4: TaskHandler.DeleteTask:input_type -> TaskIDRequest
	1, // 5: TaskHandler.AddTask:output_type -> SingleTask
	2, // 6: TaskHandler.FetchTask:output_type -> ListTasks
	1, // 7: TaskHandler.StateUpdate:output_type -> SingleTask
	1, // 8: TaskHandler.DeleteTask:output_type -> SingleTask
	5, // [5:9] is the sub-list for method output_type
	1, // [1:5] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_tasks_proto_init() }
func file_tasks_proto_init() {
	if File_tasks_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_tasks_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tasks_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SingleTask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tasks_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTasks); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_tasks_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_tasks_proto_goTypes,
		DependencyIndexes: file_tasks_proto_depIdxs,
		MessageInfos:      file_tasks_proto_msgTypes,
	}.Build()
	File_tasks_proto = out.File
	file_tasks_proto_rawDesc = nil
	file_tasks_proto_goTypes = nil
	file_tasks_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// TaskHandlerClient is the client API for TaskHandler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TaskHandlerClient interface {
	AddTask(ctx context.Context, in *SingleTask, opts ...grpc.CallOption) (*SingleTask, error)
	FetchTask(ctx context.Context, in *TaskIDRequest, opts ...grpc.CallOption) (*ListTasks, error)
	StateUpdate(ctx context.Context, in *TaskIDRequest, opts ...grpc.CallOption) (*SingleTask, error)
	DeleteTask(ctx context.Context, in *TaskIDRequest, opts ...grpc.CallOption) (*SingleTask, error)
}

type taskHandlerClient struct {
	cc grpc.ClientConnInterface
}

func NewTaskHandlerClient(cc grpc.ClientConnInterface) TaskHandlerClient {
	return &taskHandlerClient{cc}
}

func (c *taskHandlerClient) AddTask(ctx context.Context, in *SingleTask, opts ...grpc.CallOption) (*SingleTask, error) {
	out := new(SingleTask)
	err := c.cc.Invoke(ctx, "/TaskHandler/AddTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskHandlerClient) FetchTask(ctx context.Context, in *TaskIDRequest, opts ...grpc.CallOption) (*ListTasks, error) {
	out := new(ListTasks)
	err := c.cc.Invoke(ctx, "/TaskHandler/FetchTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskHandlerClient) StateUpdate(ctx context.Context, in *TaskIDRequest, opts ...grpc.CallOption) (*SingleTask, error) {
	out := new(SingleTask)
	err := c.cc.Invoke(ctx, "/TaskHandler/StateUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskHandlerClient) DeleteTask(ctx context.Context, in *TaskIDRequest, opts ...grpc.CallOption) (*SingleTask, error) {
	out := new(SingleTask)
	err := c.cc.Invoke(ctx, "/TaskHandler/DeleteTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TaskHandlerServer is the server API for TaskHandler service.
type TaskHandlerServer interface {
	AddTask(context.Context, *SingleTask) (*SingleTask, error)
	FetchTask(context.Context, *TaskIDRequest) (*ListTasks, error)
	StateUpdate(context.Context, *TaskIDRequest) (*SingleTask, error)
	DeleteTask(context.Context, *TaskIDRequest) (*SingleTask, error)
}

// UnimplementedTaskHandlerServer can be embedded to have forward compatible implementations.
type UnimplementedTaskHandlerServer struct {
}

func (*UnimplementedTaskHandlerServer) AddTask(context.Context, *SingleTask) (*SingleTask, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTask not implemented")
}
func (*UnimplementedTaskHandlerServer) FetchTask(context.Context, *TaskIDRequest) (*ListTasks, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchTask not implemented")
}
func (*UnimplementedTaskHandlerServer) StateUpdate(context.Context, *TaskIDRequest) (*SingleTask, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StateUpdate not implemented")
}
func (*UnimplementedTaskHandlerServer) DeleteTask(context.Context, *TaskIDRequest) (*SingleTask, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTask not implemented")
}

func RegisterTaskHandlerServer(s *grpc.Server, srv TaskHandlerServer) {
	s.RegisterService(&_TaskHandler_serviceDesc, srv)
}

func _TaskHandler_AddTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SingleTask)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskHandlerServer).AddTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TaskHandler/AddTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskHandlerServer).AddTask(ctx, req.(*SingleTask))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskHandler_FetchTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskHandlerServer).FetchTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TaskHandler/FetchTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskHandlerServer).FetchTask(ctx, req.(*TaskIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskHandler_StateUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskHandlerServer).StateUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TaskHandler/StateUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskHandlerServer).StateUpdate(ctx, req.(*TaskIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskHandler_DeleteTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskHandlerServer).DeleteTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TaskHandler/DeleteTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskHandlerServer).DeleteTask(ctx, req.(*TaskIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TaskHandler_serviceDesc = grpc.ServiceDesc{
	ServiceName: "TaskHandler",
	HandlerType: (*TaskHandlerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddTask",
			Handler:    _TaskHandler_AddTask_Handler,
		},
		{
			MethodName: "FetchTask",
			Handler:    _TaskHandler_FetchTask_Handler,
		},
		{
			MethodName: "StateUpdate",
			Handler:    _TaskHandler_StateUpdate_Handler,
		},
		{
			MethodName: "DeleteTask",
			Handler:    _TaskHandler_DeleteTask_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tasks.proto",
}
